Tổng hợp tất cả các câu hỏi của thành viên trong nhóm Bar.

01. Đặt biến sao cho hợp lệ ?

02. Có thể đặt tên biến trùng nhau được không ? Điều gì xảy ra khi tên biến bị trùng?

03. Một số quy ước đặt tên biến cho logic?

04. Các kiểu dữ liệu trong JS?

05. Hiện tượng hoisting trong js là gì? Hiện tượng này tốt hay xấu? Có cách nào để ngăn nó diễn ra?

06. Trong js, ""10"" + 5 = ""105"" nhưng ""10"" - 5 = 5, giải thích? 

07. Phân biệt var, let, const?

08. Làm thế nào để xử lý trường hợp if else lồng nhau nhiều cấp ?

09. Có nên sử dụng toán tử ba ngôi cho mọi trường hợp so sánh if else ?

10. Câu lệnh if được thực hiện khi nào.

11. Câu lệnh else được thực hiện khi nào.

12. Khi nào thực hiện câu lệnh else if.

13. Quy ước đặt tên hàm

14. Các trường hợp nên dùng và không nên dùng arrow function ?

15. Lưu ý khi sử dụng từ khóa this trong arrow function?

16. Có thể không truyền đối số khi gọi hàm có tham số không ?

17. Trong js có những loại scope nào?

18. Ảnh hường của scope tới biến this?

19. Có những cách nào để đổi Scope?

20. Function Scope và Block Scope khác nhau ở đâu?

21. Khác biệt giữa namespace và Scope?

22. Các kiểu khai báo Array?

23. Các kiểu dữ liệu có trong mảng ? Có thể có một hàm( function) trong mảng được không?

24. Ngoài mảng ra thì còn các nào để lưu trữ dữ liệu theo dạng dãy, mảng?

25. Có những các nào để clone một mảng?

26. Muốn thay đổi phần tử trong mảng (thêm sửa xóa) nhưng không muốn thay đổi mảng ban đầu thì làm thế nào?

27. Cách tối ưu tốc độ khi duyệt mảng lớn?

28. Các loại vòng lặp

29. Khi nào dùng vòng lặp

30. Sự khác nhau giữa while và do while

31. Sự khác nhau giữa for in và for of

32. Iterator có gì khác so với for loop hay không?

33. Iterator là gì?

34. Ứng dụng của iterator trong thực tế là như thế nào?

35. Object là gì? Tạo ra chúng như thế nào?

36. Truy cập thuộc tính của Object bằng dấu chấm(""."") khác với cặp [] như thế nào

37. Để 2 key cùng tên trong 1 object có gây ra lỗi không? Vì sao

38. Tại sao luôn phải thêm constructor() khi tạo 1 class

39. Tại sao không bắt buộc phải dùng tên constructor() trong class?

40. Class là gì ?

41. Constructor là gì ?

42. Hoisting có ảnh hưởng gì đối với class không

43. Lợi ích của việc sử dụng module

44. Các lợi thế khi sử dụng module loader

45. Import và export trong sử dụng modules là gì?

46. Cách tích hợp các modules vào chương trình ?

47. Cách tổ chức một modules sao cho clean nhất ?

48. Đóng gói modules là gì ? Tại sao cần đóng gói modules ?

49. Tại sao cần đóng gói modules ?

50. Tham số hàm callback của Promise có bắt buộc phải nhận cả 2 là resolve và reject không? nếu bỏ 1 trong 2 hoặc cả 2 thì gặp vấn đề gì?

51. Ngoài ứng dụng để gọi API, Promise còn công dụng hay ngoài thực tế không?

52. Có 2 cách để xử lý khi Promise bị từ chối là hàm callback thứ 2 và catch(), Vậy nên dùng cái nào hơn và vì sao?

53. Promise là gì ?

54. Những lưu ý khi dùng Promise ?

55. Tại sao nên dùng Promise ?

56. Có thể dùng async await lồng nhau ? ví dụ function sử dụng async await, trong function đó gọi 1 function khác cũng sử dụng async await

57. Sự khác biệt giữa  await và yield là gì?

58. Làm sao để xử lý lỗi trong quá trình sử dụng async await ?

59. Phân biệt PUT và POST?

60. Có rât nhiều status code vậy trường hợp nào hay xảy ra nhất và có giải pháp gì để khắc phục các lỗi đó?

61. Có trường hợp phải chèn thêm header cho request thì server mới chấp nhận, tại sao lại như vậy? làm như thế thì có lợi ích gì?

62. HTTP Request là gì ?

63. Nguyên lý hoạt động của HTTP Request ?

64. Cấu trúc của HTTP Request ?

65. Hàm có tính chất như thế nào ?

66. Các loại hàm cơ bản? Có thể có hoisting trong Function ko ?

67. Sự khác nhau giữa forEach và Map ?

68. Giải thích cách dùng This trong Object

69. Lưu ý gì đối với Constructor khi sử dụng trong Object ?